FORMAT: 1A
HOST: https://api.ciscospark.com/v1/

# Peefaee

People are registered users of the Spark application. Searching and viewing People requires an auth token with a scope of
`spark:people_read`. Viewing the list of all People in your Organization requires an administrator auth token with `spark-admin:people_read`
scope. Adding, updating, and removing People requires an administrator auth token with the `spark-admin:people_write` scope.

To learn more about managing people in a room see the [Memberships API]().

## People Collection [/people]

### List People [GET /people{?email,displayName,orgId,max}]

List people in your organization. For most users, either the email or a Display Name parameters are required. Admin users can omit
these fields and list all users in their organization.

+ Request

    + Headers
    
            Authorization: Bearer YOUR_AUTHORIZATION_TOKEN

+ Parameters

    + email: `john.andersen@example.com` (string, optional) - List people with this email address. For non-admin requests, either this or displayName are required.
    + displayName: `John Andersen` (string, optional) - List people whose name starts with this string. For non-admin requests, either this or email are required.
    + orgId: `` (string, optional) - List people in this organization. Only admin users of another organization (such as partners) may use this parameter.
    + max: `1000` (number, optional) - Limit the maximum number of people in the response.
        + Default: 1000

+ Response 200 (application/json)

    + Attributes (Person Collection Response)

### Create a Person [POST /people]

Create a new user account for a given organization. Only an admin can create a new user account.

Currently, users may have only one email address associated with their account. The `emails` parameter is an array, which accepts
multiple values to allow for future expansion, but currently only one email address will be used for the new user.

+ Request (application/json)

    + Headers

            Authorization: Bearer YOUR_AUTHORIZATION_TOKEN

    + Body
    
            {
                "emails": [
                  "john.smith@example.com",
                  "jsmith@example.com"
                  ],
                "displayName": "John Smith",
                "firstName": "John",
                "lastName": "Smith",
                "avatar": "https://1efa7a94ed21783e352-c62266528714497a17239ececf39e9e2.ssl.cf1.rackcdn.com/V1~54c844c89e678e5a7b16a306bc2897b9~wx29yGtlTpilEFlYzqPKag==~1600",
                "orgId" : "OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh",
                "roles" : [ 
                  "Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy",
                  "Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX"
                  ],
                "licenses" : [
                  "Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy",
                  "Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX"
                  ]
            }

+ Response 200 (application/json)

    + Attributes (Person)

### Get Person Details [GET /people/{personId}]

Shows details for a person, by ID.

Specify the person ID in the `personId` parameter in the URI.

+ Request

    + Headers
    
            Authorization: Bearer YOUR_AUTHORIZATION_TOKEN

+ Parameters

    + personId: `Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mNWIzNjE4Ny1jOGRkLTQ3MjctOGIyZi1mOWM0NDdmMjkwNDY` (string, required) - Unique identifier for the person

+ Response 200 (application/json)

    + Attributes (Person)

### Update a Person [PUT /people/{personId}]

Update details for a person, by ID.

Specify the person ID in the `personId` parameter in the URI. Only an admin can update a person details. Email addresses for a person
cannot be changed via the Spark API.

Include all details for the person. This action expects all user details to be present in the request. A common approach is to first GET
the person's details, make changes, then PUT both the changed and unchanged values.

+ Parameters

    + personId: `Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mNWIzNjE4Ny1jOGRkLTQ3MjctOGIyZi1mOWM0NDdmMjkwNDY` (string, required) - Unique identifier for the person

+ Request (application/json)

    + Headers
    
            Authorization: Bearer YOUR_AUTHORIZATION_TOKEN

    + Body
    
            {
                "emails": ["john.smith@example.com"],
                "displayName": "John Smith",
                "firstName": "John",
                "lastName": "Smith",
                "avatar": "https://1efa7a94ed21783e352-c62266528714497a17239ececf39e9e2.ssl.cf1.rackcdn.com/V1~54c844c89e678e5a7b16a306bc2897b9~wx29yGtlTpilEFlYzqPKag==~1600",
                "orgId" : "OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh",
                "roles" : [ 
                  "Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy",
                  "Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX"
                  ],
                "licenses" : [
                  "Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy",
                  "Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX"
                  ]
            }

+ Response 200 (application/json)

    + Attributes (Person)

### Delete a Person [DELETE /people/{personId}]

Remove a person from the system.

Only an admin can remove a person.

+ Request

    + Headers
    
            Authorization: Bearer YOUR_AUTHORIZATION_TOKEN

+ Parameters

    + personId: `Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mNWIzNjE4Ny1jOGRkLTQ3MjctOGIyZi1mOWM0NDdmMjkwNDY` (string, required) - Unique identifier for the person

+ Response 204 (application/json)

### Get My Own Details [GET /people/me]

Show the profile for the authenticated user. This is the same as GET `/people/{personId}` using the Person ID associated with your Auth token.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer YOUR_AUTHORIZATION_TOKEN

+ Response 200 (application/json)

    + Attributes (Person)
    
# Data Structures

## Person (object)

+ id: `Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mNWIzNjE4Ny1jOGRkLTQ3MjctOGIyZi1mOWM0NDdmMjkwNDY` (string) - Unique identifier of the person
+ emails: `john.andersen@example.com` (array[string]) - Array of email addresses
+ displayName: `John Andersen` (string) - Full name of the person
+ firstName: `John` (string) - First name of the person
+ lastName: `Andersen` (string) - Last name of the person
+ avatar: `https://1efa7a94ed21783e352-c62266528714497a17239ececf39e9e2.ssl.cf1.rackcdn.com/V1~54c844c89e678e5a7b16a306bc2897b9~wx29yGtlTpilEFlYzqPKag==~1600` (string) - URL to the person's avatar in PNG format
+ orgId: `OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh` (string) - ID of the organization to which this person belongs
+ roles: `Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy`, `Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX` (array) - Array of role strings representing the roles to which this person belongs
+ licenses: `Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy`, `Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX` (array) - Array of license strings allocated to this person
+ created: `2015-10-18T14:26:16+00:00` (string) - Date and time the person was created
+ timezone: `America/Denver` (string) - Time zone of the person
+ lastActivity: `2015-10-18T14:26:16+00:00` (string) - Date and time of the person's last activity within Cisco Spark
+ status: `active` (enum) - Current status of the person

    + Members
        + active - person is actively using Cisco Spark
        + inactive - person is _not_ actively using Cisco Spark

+ invitePending: `false` (enum) - Whether or not an invite is pending for user to complete account activation

    + Members
        + true - invite pending
        + false - an invite is not pending for this person

+ loginEnabled: `true` (enum) - Whether or not the user is allowed to use Cisco Spark

    + Members
        + true - person _can_ log into Cisco Spark
        + false - person _cannot_ log into Cisco Spark

## Person Collection Response (object)
+ items (array[Person])